{"version":3,"sources":["images/michael-scott.png","audio/the-office-theme-song.mp3","styled/index.js","components/Square.js","winner.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameContainer","styled","div","GameInner","BoardContainer","SquareButton","button","Square","value","onClick","style","className","calculateWinner","squares","winningLines","i","length","a","b","c","Board","status","dwight","useState","Array","fill","boardSquares","setBoardSquares","xIsNext","setXIsNext","renderSquare","nextTurn","handleClick","winner","map","move","restart","ImageStyle","Image","img","TheOffice","Game","autoPlay","src","themeSong","type","michaelScott","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,mD,62CCEpC,IAAMC,EAAgBC,IAAOC,IAAV,KAUbC,EAAYF,IAAOC,IAAV,KAYTE,EAAiBH,IAAOC,IAAV,KAedG,EAAeJ,IAAOK,OAAV,KCpCV,SAASC,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAChCC,EAAQF,EAAK,kBAAcA,GAAd,UACnB,OACE,kBAACH,EAAD,CACEM,UAAWD,EACXD,QAASA,GACRD,GCTA,SAASI,EAAgBC,GAa9B,IAXA,IAAMC,EAAe,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,mBAE1BD,EAAaC,GAFa,GAErCE,EAFqC,KAElCC,EAFkC,KAE/BC,EAF+B,KAG5C,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAEpE,OAAON,EAAQI,GAInB,OAAO,KCfM,SAASG,IAAS,IAgC3BC,EACAC,EAjC0B,EACUC,mBAASC,MAAM,GAAGC,KAAK,OADjC,mBACvBC,EADuB,KACTC,EADS,OAEAJ,oBAAS,GAFT,mBAEvBK,EAFuB,KAEdC,EAFc,KAcxBC,EAAe,SAACf,GACpB,OACE,kBAACR,EAAD,CACEC,MAAOkB,EAAaX,GACpBN,QAAS,kBAdK,SAACM,GACnB,IAAMF,EAAO,YAAOa,GACdK,EAAWH,EACb,IAAM,IACNhB,EAAgBc,IAAiBb,EAAQE,KAC7CF,EAAQE,GAAKgB,EACbJ,EAAgBd,GAChBgB,GAAYD,IAOOI,CAAYjB,OAgB3BkB,EAASrB,EAAgBc,GAM/B,OALAL,EAASY,EAAM,UACRA,EADQ,4BAERL,EAAU,SAAW,UAFb,WAGfN,EAAM,UAAMW,EAAS,2BAA6B,IAGhD,oCACE,kBAAC7B,EAAD,KACE,yBAAKO,UAAU,UAAUU,GACzB,6BAAMS,EAAa,GAAIA,EAAa,GAAIA,EAAa,IACrD,6BAAMA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IACrD,6BAAMA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IACrD,kCAvBJJ,EAAaQ,KAAI,SAACC,GAChB,IAAMC,EAAU,CAAED,QAClB,OACE,4BAAQ1B,QAAS,kBAAM2B,EAAQV,KAA/B,gBAsBF,yBAAKf,UAAU,YAAYW,I,6kBCjD1B,IAAMe,EAAapC,IAAOC,IAAV,KAQVoC,EAAQrC,IAAOsC,IAAV,KASLC,EAAYvC,IAAOC,IAAV,KASP,SAASuC,IACtB,OACE,kBAACzC,EAAD,KACE,2BAAO0C,UAAQ,GACb,4BAAQC,IAAKC,IAAWC,KAAK,gBAE/B,kBAAC1C,EAAD,KACE,kBAACqC,EAAD,KAAW,0CACX,kBAACpB,EAAD,OAEF,kBAACiB,EAAD,KACE,kBAACC,EAAD,CAAOK,IAAKG,IAAcC,IAAI,oBChCvBC,MARf,WACE,OACE,6BACE,kBAACP,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3044b89c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/michael-scott.b09e93bf.png\";","module.exports = __webpack_public_path__ + \"static/media/the-office-theme-song.45ddc095.mp3\";","import styled from 'styled-components'\n\nexport const GameContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-image: radial-gradient(#F8F9FD, #2997F1);\n`\n\nexport const GameInner = styled.div`\n  position: fixed;\n  z-index: 1000;\n  width: 100%;\n  max-width: 800px;\n  height: 70vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`\n\nexport const BoardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  > div {\n    display: flex;\n  }\n  .status {\n    display: flex;\n    justify-content: center;\n    font-size: 35px;\n    font-family: 'Special Elite', cursive;\n    color: #F40804;\n  }\n`\n\nexport const SquareButton = styled.button`\n  width: 100px;\n  height: 100px;\n  margin: 2px;\n  border: 1px solid #4a2908;\n  border-radius: 0px;\n  color: #173ef2;\n  font-size: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: 'Special Elite', cursive;\n  background: #f6fe81;\n  outline: none;\n`","import React from 'react'\nimport { SquareButton } from '../styled'\n\nexport default function Square({ value, onClick }) {\n  const style = value ? `squares ${value}` : `squares`\n  return (\n    <SquareButton\n      className={style}\n      onClick={onClick}>\n      {value}\n    </SquareButton>\n  )\n}\n","export function calculateWinner(squares) {\n  // get our set of the winner\n  const winningLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n  // loop through this set\n  for (let i = 0; i < winningLines.length; i++) {\n    // check to see is the value in square array fulfill the winner\n    const [a, b, c] = winningLines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      // is so, it will return either X or O\n      return squares[a];\n    }\n  }\n  // else, return nothing\n  return null;\n}\n","import React, { useState } from 'react'\nimport Square from './Square'\nimport { calculateWinner } from '../winner'\nimport { BoardContainer } from '../styled'\n// import dwight from '../images/dwight.png'\n// import michael from '../images/michael.png'\n\nexport default function Board() {\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null))\n  const [xIsNext, setXIsNext] = useState(true)\n\n  const handleClick = (i) => {\n    const squares = [...boardSquares]\n    const nextTurn = xIsNext\n      ? \"X\" : \"O\"\n    if (calculateWinner(boardSquares) || squares[i]) return\n    squares[i] = nextTurn\n    setBoardSquares(squares)\n    setXIsNext(!xIsNext)\n  }\n\n  const renderSquare = (i) => {\n    return (\n      <Square\n        value={boardSquares[i]}\n        onClick={() => handleClick(i)}\n      />\n    )\n  }\n\n  const renderRestartGame = () => {\n    boardSquares.map((move) => {\n      const restart = { move }\n      return (\n        <button onClick={() => restart(boardSquares)}>Restart</button>\n      )\n    })\n  }\n\n  let status\n  let dwight\n  const winner = calculateWinner(boardSquares)\n  status = winner\n    ? `${winner} wins the game`\n    : `${xIsNext ? \"Dwight\" : \"Michael\"}'s turn`\n  dwight = `${winner ? \"Dwight you ignorant slut\" : \"\"}`\n\n  return (\n    <>\n      <BoardContainer>\n        <div className=\"status\">{status}</div>\n        <div>{renderSquare(0)}{renderSquare(1)}{renderSquare(2)}</div>\n        <div>{renderSquare(3)}{renderSquare(4)}{renderSquare(5)}</div>\n        <div>{renderSquare(6)}{renderSquare(7)}{renderSquare(8)}</div>\n        <div>{renderRestartGame()}</div>\n      </BoardContainer>\n      <div className=\"ignorant\">{dwight}</div>\n    </>\n  )\n}\n","import React from 'react'\nimport Board from './Board'\nimport { GameContainer, GameInner } from '../styled'\nimport michaelScott from '../images/michael-scott.png'\nimport themeSong from '../audio/the-office-theme-song.mp3'\nimport styled from 'styled-components'\n\nexport const ImageStyle = styled.div`\n  position: relative;\n  max-width: 100vw;\n  min-height: 100vh;\n  width: 100%;\n  height: 100%;\n`\n\nexport const Image = styled.img`\n  position: absolute;\n  width: 100%;\n  height: auto;\n  bottom: 0;\n  right: 0;\n  pointer-events: none;\n`\n\nexport const TheOffice = styled.div`\n  > p {\n    font-size: 80px;\n    color: #fff;\n    text-shadow: 1px 1px black;\n    font-family: 'Special Elite', cursive;\n  }\n`\n\nexport default function Game() {\n  return (\n    <GameContainer>\n      <audio autoPlay>\n        <source src={themeSong} type=\"audio/mpeg\" />\n      </audio>\n      <GameInner>\n        <TheOffice><p>the office</p></TheOffice>\n        <Board />\n      </GameInner>\n      <ImageStyle>\n        <Image src={michaelScott} alt=\"si tito scott\" />\n      </ImageStyle>\n    </GameContainer>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}